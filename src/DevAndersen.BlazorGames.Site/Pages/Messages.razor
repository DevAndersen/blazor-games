@using DevAndersen.BlazorGames.Core.Messaging

<div class="bg-dark rounded-1 border  border-secondary h-100">
    <div class="d-flex flex-column h-100">
        <div class="border-secondary border-bottom text-center fw-bold">Messages</div>
        @if (Handler.HasChatSupport && CanViewChat)
        {
            <div class="border-secondary border-bottom text-center d-flex">
                @foreach (MessageTab tab in Enum.GetValues<MessageTab>())
                {
                    string? selected = tab == currentTab ? "data-selected" : null;
                    <div @onclick="() => SetMessageTab(tab)" class="col-4 message-tab flex-fill user-select-none" data-selected=@selected>@tab</div>
                }
            </div>
        }
        <div class="flex-fill d-flex flex-column scroller">
            <div class="p-2 d-flex flex-wrap">
                @{
                    IMessageSender? lastSender = null;

                    var messageGroup = Handler.GetGroupedChatMessages();
                    var filteredMessages = FilterMessagesForCurrentTab(messageGroup);

                    foreach ((IMessageSender sender, string[] messages, DateTime timestamp) in filteredMessages)
                    {
                        <div class="p-1 col-12">
                            @if (lastSender != sender)
                            {
                                <div class="pb-1 opacity-50 message-sender" data-sender=@GetSender(sender)>@GetSenderName(sender) (<span class="text-info">@timestamp.ToString("HH:mm:ss")</span>)</div>
                            }

                            <div class="p-1 rounded message" data-sender=@GetSender(sender) data-system-level=@((sender as SystemMessageSender)?.MessageLevel)>
                                @for (int i = 0; i < messages.Length; i++)
                                {
                                    string message = messages[i];
                                    bool padding = i != messages.Length - 1;
                                    <div class="text-wrap text-break message-padding" data-padding=@padding>@message</div>
                                }
                            </div>
                        </div>
                        lastSender = sender;
                    }
                }
            </div>
        </div>
        @if (Handler.HasChatSupport && CanViewChat && currentTab != MessageTab.System)
        {
            <div class="p-2">
                <div class="input-group">
                    <input @bind=ChatMessage @onkeyup=KeyUp type="text" class="form-control text-light border-0" style="background-color: var(--bs-gray-dark)" placeholder="Message">
                    <button @onclick=SendMessage class="btn btn btn-secondary border-1 border-dark" type="button" id="button-addon2">Send</button>
                </div>
            </div>
        }
    </div>
</div>

@code
{
    [Parameter]
    public MessageHandler Handler { get; set; } = default!;

    [Parameter]
    public PlayerIdentity Identity { get; set; } = default!;

    [Parameter]
    public bool CanViewChat { get; set; }

    public string ChatMessage { get; set; }

    private MessageTab currentTab;

    public Messages()
    {
        ChatMessage = string.Empty;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
        if (!CanViewChat)
        {
            currentTab = MessageTab.System;
        }
    }

    private void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(ChatMessage) && Handler != null)
        {
            Handler.SendChatMessage(ChatMessage, Identity);
            ChatMessage = string.Empty;
        }
    }

    private void KeyUp(KeyboardEventArgs args)
    {
        if (args.Key == "Enter")
        {
            SendMessage();
        }
    }

    private bool IsSenderSelf(IMessageSender sender) => (sender as PlayerMessageSender)?.PlayerId == Identity.Id;

    private string GetSenderName(IMessageSender sender) => IsSenderSelf(sender) ? "You" : sender.GetSenderIdentity();

    private string GetSender(IMessageSender sender)
    {
        if (sender is SystemMessageSender)
        {
            return "system";
        }
        else if (IsSenderSelf(sender))
        {
            return "self";
        }
        return "player";
    }

    private IEnumerable<MessageGroup> FilterMessagesForCurrentTab(IEnumerable<MessageGroup> groupedMessages)
    {
        return currentTab switch
        {
            MessageTab.Chat => groupedMessages.Where(g => g.Sender is PlayerMessageSender),
            MessageTab.System => groupedMessages.Where(g => g.Sender is SystemMessageSender),
            _ => groupedMessages
        };
    }

    private void SetMessageTab(MessageTab tab)
    {
        currentTab = tab;
    }

    private enum MessageTab
    {
        All,
        Chat,
        System
    }
}
