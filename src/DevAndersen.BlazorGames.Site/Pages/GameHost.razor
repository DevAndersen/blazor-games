@page "/games/{GameId:guid}"
@using DevAndersen.BlazorGames.Core.GameHandlers
@using DevAndersen.BlazorGames.Site.Pages.Games
@using DevAndersen.BlazorGames.Site.ViewExtensions
@inherits BasePage
@implements IDisposable
@inject IIdentityService identityService
@inject GameLobby gameLobby
@inject NavigationManager navigationManager

<div class="container-lg p-2 d-flex h-100 flex-wrap">
    @if (Identity != null && Handler != null)
    {
        <div class="col-12 col-sm-8 bg-secondary flex-fill">
            <DynamicComponent Type="@typeof(RockPaperScissors)" Parameters="@parameters" />
        </div>
        @if (Handler?.GameDefinition.PlayersNeeded > 1)
        {
            <div class="col-12 col-sm-4 px-2">
                <Messages Handler="Handler.Chat" Identity="Identity" />
            </div>
        }
    }
</div>

@code
{
    [Parameter]
    public Guid GameId { get; set; }

    private IDictionary<string, object>? parameters;

    public override string PageTitle => gameLobby.GetGameHandler(GameId)?.GameDefinition.Name ?? string.Empty;

    public PlayerIdentity? Identity { get; set; }

    public GameHandler? Handler { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            Identity = await identityService.LoadIdentityAsync();
            Handler = gameLobby.GetGameHandler(GameId);
            if (Handler != null)
            {
                parameters = new Dictionary<string, object>
                {
                    ["Handler"] = Handler,
                    ["Identity"] = Identity
                };

                Handler.UpdateNotifier.OnUpdate += Update;
                StateHasChanged();
            }
            else
            {
                navigationManager.NavigateTo("/");
            }
        }
    }

    public void Update()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        if (Handler != null)
        {
            Handler.UpdateNotifier.OnUpdate -= Update;
            Handler.StopGame();
        }
    }
}
