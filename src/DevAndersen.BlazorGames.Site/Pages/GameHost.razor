@page "/games/{GameId:guid}"
@using DevAndersen.BlazorGames.Core.Games
@using DevAndersen.BlazorGames.Core.Games.GameHandlers
@using DevAndersen.BlazorGames.Site.Pages.Games
@using DevAndersen.BlazorGames.Site.ViewExtensions
@inherits BasePage
@implements IDisposable
@inject IIdentityService identityService
@inject GameLobby gameLobby
@inject NavigationManager navigationManager

<div class="container-lg p-2 d-flex h-100 flex-wrap">
    @if (Identity != null && Handler != null)
    {
        <div class="col-12 col-sm-8 bg-secondary flex-fill game-container" data-game-ended=@(Handler.State == GameState.Ended) data-spectator=@(!IsParticipating())>
            <DynamicComponent Type=GetView() Parameters=parameters />
        </div>
        <div class="col-12 col-sm-4 px-2">
            <Messages Handler=Handler.Chat Identity=Identity CanViewChat=IsParticipating() />
        </div>
    }
</div>

@code
{
    [Parameter]
    public Guid GameId { get; set; }

    private IDictionary<string, object>? parameters;

    public override string PageTitle => gameLobby.GetGameHandler(GameId)?.GameDefinition.Name ?? string.Empty;

    public PlayerIdentity? Identity { get; set; }

    public GameHandler? Handler { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            Identity = await identityService.LoadIdentityAsync();
            Handler = gameLobby.GetGameHandler(GameId);
            if (Handler != null)
            {
                parameters = new Dictionary<string, object>
                {
                    [nameof(GamePage<GameHandler>.Handler)] = Handler,
                    [nameof(GamePage<GameHandler>.Identity)] = Identity
                };

                Handler.UpdateNotifier.OnUpdate += Update;
                Handler.JoinGame(Identity);
                StateHasChanged();
            }
            else
            {
                navigationManager.NavigateTo("/");
            }
        }
    }

    public void Update()
    {
        InvokeAsync(StateHasChanged);
    }

    public override void OnLeavePage()
    {
        base.OnLeavePage();
        DisconnectFromGame();
    }

    private void DisconnectFromGame()
    {
        if (Handler != null)
        {
            Handler.UpdateNotifier.OnUpdate -= Update;

            if (IsParticipating())
            {
                Handler.StopGame();
            }
        }
    }

    private Type GetView()
    {
        GameIdentity? gameIdentity = gameLobby.GetGameHandler(GameId)?.GameIdentity;
        return gameIdentity switch
        {
            GameIdentity.RockPaperScissors => typeof(RockPaperScissors),
            _ => throw new InvalidOperationException($"No game view defined for game '{gameIdentity}'.")
        };
    }

    private bool IsParticipating() => Identity != null && (Handler?.PlayerIds.Contains(Identity.Id) ?? false);

    public override void Dispose()
    {
        DisconnectFromGame();
        base.Dispose();
    }
}
