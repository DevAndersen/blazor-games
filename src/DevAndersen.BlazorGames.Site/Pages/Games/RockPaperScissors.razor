@using DevAndersen.BlazorGames.Core.GameHandlers
@using DevAndersen.BlazorGames.Site.ViewExtensions
@using static DevAndersen.BlazorGames.Core.GameHandlers.RockPaperScissorsHandler
@inherits GamePage<RockPaperScissorsHandler>

<div class="h-100 d-flex flex-column user-select-none">
    <div class="p-2 text-center">State: @GetPlayerResult()</div>
    <div class="d-flex flex-fill">
        @{
            RockPaperScissorsChoice? playerChoice = GetPlayerChoice();
        }
        @foreach (RockPaperScissorsChoice option in Enum.GetValues<RockPaperScissorsHandler.RockPaperScissorsChoice>())
        {
            string outerClasses = playerChoice == option ? "p-1" : "p-3";
            string innerClasses = GetInnerClasses(playerChoice, option);

            <div class="col-4 @outerClasses h-100 d-flex align-items-center">
                <div @onclick="() => Handler.MakeChoice(Identity.Id, option)" class="@innerClasses rounded-2 h-50 align-middle flex-fill text-center d-flex flex-wrap align-items-center">
                    <div class="text-center col-12">@option</div>
                </div>
            </div>
        }
    </div>
</div>

@code
{
    private RockPaperScissorsResult? GetPlayerResult()
    {
        return Handler.Results.TryGetValue(Identity.Id, out RockPaperScissorsResult playerResult)
            ? playerResult
            : null;
    }

    private RockPaperScissorsChoice? GetPlayerChoice()
    {
        return Handler.Choices.TryGetValue(Identity.Id, out RockPaperScissorsChoice playerChoice)
            ? playerChoice
            : null;
    }

    private string GetInnerClasses(RockPaperScissorsChoice? playerChoice, RockPaperScissorsChoice option)
    {
        return playerChoice == null
            ? "rps-tile border border-2"
            : playerChoice == option
                ? "rps-tile-selected"
                : "rps-tile-not-selected border border-2";
    }
}
