@using DevAndersen.BlazorGames.Core.GameHandlers

<div class="bg-dark rounded-1 border h-100">
    <div class="d-flex flex-column h-100">
        <div class="p-1 text-center fw-bold border-bottom">Chat</div>
        <div class="flex-fill d-flex flex-column scroller">
            <div class="p-2 d-flex flex-wrap">
                @if (Handler != null)
                {
                    Guid? lastSenderId = null;
                    foreach ((string[] messages, PlayerIdentity sender) in GetGroupedChatMessages())
                    {
                        <div class="p-1 col-12">
                            @if (lastSenderId != sender.Id)
                            {
                                <div class="pb-1 opacity-50 @GetMessageSenderDirectionClasses(sender)">@GetSenderName(sender)</div>
                            }
                            <div class="w-75 p-1 rounded @GetMessageDirectionClasses(sender)">
                                @for (int i = 0; i < messages.Length; i++)
                                {
                                    string message = messages[i];
                                    string paddingClass = GetMessagePadding(i != messages.Length - 1);
                                    <div class="text-wrap text-break @paddingClass">@message</div>
                                }
                            </div>
                        </div>
                        lastSenderId = sender.Id;
                    }
                }
            </div>
        </div>
        <div class="p-2">
            <div class="input-group">
                <input @bind=ChatMessage type ="text" class="form-control text-light border-0" style="background-color: var(--bs-gray-dark)" placeholder="Message">
                <button @onclick=SendChatMessage class="btn btn btn-secondary border-1 border-dark" type="button" id="button-addon2">Send</button>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public GameHandler? Handler { get; set; }

    [Parameter]
    public PlayerIdentity? Identity { get; set; }

    public string ChatMessage { get; set; } = string.Empty;

    public void SendChatMessage()
    {
        if (!string.IsNullOrWhiteSpace(ChatMessage) && Handler != null)
        {
            Handler.SendChatMessage(ChatMessage, Identity);
            ChatMessage = string.Empty;
        }
    }

    public IEnumerable<(string[] messages, PlayerIdentity sender)> GetGroupedChatMessages()
    {
        if (Handler?.Chat.Count > 0)
        {
            int index = 0;
            bool keepGoing = true;

            while (keepGoing)
            {
                PlayerIdentity playerIdentity = Handler.Chat.Skip(index).FirstOrDefault().Sender;

                string[] messages = Handler.Chat
                    .Skip(index)
                    .TakeWhile(x => x.Sender.Id == playerIdentity.Id)
                    .Select(y => y.Message)
                    .ToArray();

                index += messages.Length;
                if (index >= Handler.Chat.Count)
                {
                    keepGoing = false;
                }

                yield return (messages, playerIdentity);
            }
        }
    }

    private bool IsSenderSelf(PlayerIdentity sender) => sender.Id == Identity?.Id;

    private string GetMessageDirectionClasses(PlayerIdentity sender) => IsSenderSelf(sender)
        ? "bg-success"
        : "bg-primary float-end";

    private string GetMessageSenderDirectionClasses(PlayerIdentity sender) => IsSenderSelf(sender)
        ? ""
        : "text-end";

    private string GetSenderName(PlayerIdentity sender) => IsSenderSelf(sender)
        ? "You"
        : sender.Username ?? sender.Id.ToString();

    private string GetMessagePadding(bool shouldBeSpaced) => shouldBeSpaced
        ? "pb-2"
        : "";
}
