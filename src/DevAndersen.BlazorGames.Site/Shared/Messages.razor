@using DevAndersen.BlazorGames.Core.Chat
@using DevAndersen.BlazorGames.Core.GameHandlers
@using DevAndersen.BlazorGames.Core.Messaging

<div class="bg-dark rounded-1 border  border-secondary h-100">
    <div class="d-flex flex-column h-100">
        <div class="p-1 text-center fw-bold border-secondary border-bottom">Chat</div>
        <div class="flex-fill d-flex flex-column scroller">
            <div class="p-2 d-flex flex-wrap">
                @{
                    IMessageSender? lastSender = null;
                    foreach ((IMessageSender sender, string[] messages) in Handler.GetGroupedChatMessages())
                    {
                        <div class="p-1 col-12">
                            @if (lastSender != sender)
                            {
                                <div class="pb-1 opacity-50 @GetMessageSenderDirectionClasses(sender)">@GetSenderName(sender)</div>
                            }
                            <div class="w-75 p-1 rounded @GetMessageDirectionClasses(sender)">
                                @for (int i = 0; i < messages.Length; i++)
                                {
                                    string message = messages[i];
                                    string paddingClass = GetMessagePadding(i != messages.Length - 1);
                                    <div class="text-wrap text-break @paddingClass">@message</div>
                                }
                            </div>
                        </div>
                        lastSender = sender;
                    }
                }
            </div>
        </div>
        <div class="p-2">
            <div class="input-group">
                <input @bind=ChatMessage type="text" class="form-control text-light border-0" style="background-color: var(--bs-gray-dark)" placeholder="Message">
                <button @onclick=SendMessage class="btn btn btn-secondary border-1 border-dark" type="button" id="button-addon2">Send</button>
            </div>
        </div>
    </div>
</div>

@code
{
    [Parameter]
    public MessageHandler Handler { get; set; } = default!;

    [Parameter]
    public PlayerIdentity Identity { get; set; } = default!;

    public string ChatMessage { get; set; }

    public Messages()
    {
        ChatMessage = string.Empty;
    }

    public void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(ChatMessage) && Handler != null)
        {
            Handler.SendChatMessage(ChatMessage, Identity);
            ChatMessage = string.Empty;
        }
    }

    private bool IsSenderSelf(IMessageSender sender)
    {
        return sender is PlayerMessageSender playerSender
            && playerSender.PlayerId == Identity.Id;
    }

    private string GetMessageDirectionClasses(IMessageSender sender)
    {
        return IsSenderSelf(sender)
            ? "bg-success"
            : "bg-primary float-end";
    }

    private string GetMessageSenderDirectionClasses(IMessageSender sender)
    {
        return IsSenderSelf(sender)
            ? ""
            : "text-end";
    }

    private string GetSenderName(IMessageSender sender)
    {
        return IsSenderSelf(sender)
            ? "You"
            : sender.GetSenderIdentity();
    }

    private string GetMessagePadding(bool shouldBeSpaced)
    {
        return shouldBeSpaced
            ? "pb-2"
            : "";
    }
}
